// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AccessControlsActorType string

const (
	AccessControlsActorTypeRole AccessControlsActorType = "role"
	AccessControlsActorTypeUser AccessControlsActorType = "user"
)

func (e *AccessControlsActorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccessControlsActorType(s)
	case string:
		*e = AccessControlsActorType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccessControlsActorType: %T", src)
	}
	return nil
}

type NullAccessControlsActorType struct {
	AccessControlsActorType AccessControlsActorType
	Valid                   bool // Valid is true if AccessControlsActorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccessControlsActorType) Scan(value interface{}) error {
	if value == nil {
		ns.AccessControlsActorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccessControlsActorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccessControlsActorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccessControlsActorType), nil
}

type AccessControl struct {
	ID           int32
	ActorID      int32
	ActorType    AccessControlsActorType
	PermissionID int32
	CreatedAt    sql.NullTime
}

type Permission struct {
	ID        int32
	Title     string
	CreatedAt sql.NullTime
}

type User struct {
	ID          int64
	Username    string
	Password    string
	DisplayName string
	Role        string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}
